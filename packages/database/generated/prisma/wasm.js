
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  level: 'level',
  createdAt: 'createdAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  lastRepairDate: 'lastRepairDate',
  nextRepairDate: 'nextRepairDate',
  daysBetweenRepairs: 'daysBetweenRepairs',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SparePartScalarFieldEnum = {
  id: 'id',
  name: 'name',
  weight: 'weight',
  material: 'material',
  unitCost: 'unitCost',
  quantity: 'quantity',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  orderDate: 'orderDate',
  requestDate: 'requestDate',
  cost: 'cost',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceOrderScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  equipmentId: 'equipmentId',
  orderDate: 'orderDate',
  startDate: 'startDate',
  endDate: 'endDate',
  totalCost: 'totalCost',
  type: 'type',
  notes: 'notes',
  isOpen: 'isOpen',
  isOperational: 'isOperational',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.RepairServiceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  orderId: 'orderId',
  usedEquipmentId: 'usedEquipmentId',
  startDate: 'startDate',
  endDate: 'endDate',
  cost: 'cost',
  orderDate: 'orderDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ChecklistScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ChecklistTaskScalarFieldEnum = {
  id: 'id',
  checklistId: 'checklistId',
  order: 'order',
  name: 'name',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ChecklistResultScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  instance: 'instance',
  repairId: 'repairId',
  checked: 'checked',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.InspectionScheduleScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  checklistId: 'checklistId',
  lastOrderId: 'lastOrderId',
  orderDate: 'orderDate',
  validityDays: 'validityDays',
  nextDate: 'nextDate',
  seen: 'seen',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Department = exports.$Enums.Department = {
  Stockroom: 'Stockroom',
  Maintenance: 'Maintenance',
  Personnel: 'Personnel'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  NONE: 'NONE',
  READ_ONLY: 'READ_ONLY',
  READ_WRITE: 'READ_WRITE',
  SUPERVISOR: 'SUPERVISOR',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Access: 'Access',
  Equipment: 'Equipment',
  SparePart: 'SparePart',
  ServiceRequest: 'ServiceRequest',
  ServiceOrder: 'ServiceOrder',
  RepairService: 'RepairService',
  Checklist: 'Checklist',
  ChecklistTask: 'ChecklistTask',
  ChecklistResult: 'ChecklistResult',
  InspectionSchedule: 'InspectionSchedule'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
